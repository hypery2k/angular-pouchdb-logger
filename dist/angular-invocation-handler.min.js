/* angular-pouchdb-logger - Version 0.2.0, 20-10-2015
 * 
 * Enables logging to web database via pouchdb and $log delegate. The library is Ionic-aware and autoselect the best db for each platform
 * 
 * Copyright 2015  - Martin Reinhardt <contact@martinreinhardt-online.de>
 * License MIT
 */
var core=angular.module("ngDbLogger.core",["pouchdb"]);core.constant("ngDbLoggerConfig",{dbName:"logDB",dbLogging:!0,debug:!1,trace:!1}),core.factory("dbService",["pouchDB",function(a){"use strict";var b;return function(c){return b||(b="undefined"!=typeof ionic&&(ionic.Platform.isAndroid()||ionic.Platform.isWindowsPhone())?a(c,{adapter:"idb",size:50}):a(c,{adapter:"websql",size:50})),b}}]),core.factory("dbLoggerService",["$q","$log","dbService",function(a,b,c){"use strict";var d=b.getConfig(),e=function(b){var e=a.defer(),f=c(d.dbName);return f.allDocs({include_docs:!0}).then(function(a){var c=[];for(var d in a.rows){var f=a.rows[d].doc;b?b==f.level&&c.push(f):c.push(f)}0===c.length&&(c=null),e.resolve(c)})["catch"](function(a){console.error("Error during writing log entries: "+a),e.reject(a)}),e.promise},f=function(){var b=a.defer(),e=c(d.dbName);return e.destroy().then(function(a){console.info("Sucessfully cleared log database."),b.resolve(a)})["catch"](function(a){console.error("Error during clearing log database: "+a),b.reject(a)}),b.promise};return{readLogData:function(a){return e(a)},clearLogData:function(){return f()}}}]),core.provider("logger",function(){"use strict";var a,b={};b.debug=!1,b.outputOnly=!1,b.trace=!1,b.dbName="log",this.outputOnly=function(a){b.outputOnly=!!a},this.debugLogging=function(a){b.debug=!!a},this.traceLogging=function(a){b.trace=!!a},this.dbName=function(a){b.dbName=a};var c=function(c,d,e){var f=e[0];if(!b.outputOnly){var g=new Date,h=c(b.dbName),i={timestamp:g,level:d,details:""+f};h&&h.bulkDocs&&(i._id=""+g.getTime(),h.put(i,function(b){b&&a.error("Error during writing log entry: "+b)}))}};this.$get=["$delegate","dbService","ngDbLoggerConfig",function(d,e,f){return b.dbName=f.dbName,b.outputOnly=!f.dbLogging,b.debug=f.debug,f.debug?(PouchDB.debug.enable("*"),PouchDB.debug.enable("pouchdb:find")):(PouchDB.debug.disable(),PouchDB.debug.disable("pouchdb:find")),b.trace=f.trace,a=d,{getConfig:function(){return b},log:function(){a.info(arguments),c(e,"INFO",arguments)},warn:function(){a.warn(arguments),c(e,"WARN",arguments)},info:function(){a.info(arguments),c(e,"INFO",arguments)},error:function(){a.error(arguments),c(e,"ERROR",arguments)},debug:function(){b.debug&&(a.debug(arguments),c(e,"DEBUG",arguments))},trace:function(){b.trace&&(a.trace(arguments),c(e,"TRACE",arguments))}}}]}),core.config(["$provide","loggerProvider","ngDbLoggerConfig",function(a,b,c){"use strict";a.decorator("$log",["$delegate","dbService","ngDbLoggerConfig",function(a,c,d){return b.$get(a,c,d)}])}]);